"""
This module consumes the "restify.csv" file generated by pseudo cell 03 and creates a
multilinear model for all factors of the experiment crossover layout.
"""
import numpy as np
import pandas as pd
from pandas import DataFrame

from csv_tools import file_load_utils
from restify_mining.data_objects.assessed_participant import AssessedParticipant


# import statsmodels.api as sm


def cell_21() -> None:
    """
    The multilinear model uses two sample points per participant. To obtain these input data,
    we first re-export assessed participant data to an extra CSV, then re-import it with pandas.
    :return: None
    """
    # Load all participant objects (specifies skills, codename, control-group) from csv file
    # This is a group based comparison, we exclude the scammer.
    assessed_population: list[
        AssessedParticipant] = file_load_utils.load_all_assessed_participants(True)

    # Split mangled participant sampling points into one sample point per row (actually contains
    # time AND pass-rate per row, but every experiment run is a row instead of restify.csv every
    # participant representing a row.)
    multi_linear_samples: DataFrame = extract_multi_linear_samples(assessed_population)

    print(multi_linear_samples)
    # con: DataFrame = pd.read_csv('generated-csv-files/restify.csv')
    # con.rename(columns={'Fly ash': 'FlyAsh', 'Coarse Aggr.': "CoarseAgg",
    #                     'Fine Aggr.': 'FineAgg', 'Air Entrainment': 'AirEntrain',
    #                     'Compressive Strength (28-day)(Mpa)': 'Strength'}, inplace=True)
    # con['AirEntrain'] = con['AirEntrain'].astype('category')
    # con.head(3)


def categorical_to_numerical(participant: AssessedParticipant, first: bool) -> dict:
    """
    Helper function to convert participant information into an array of numeric values.
    This targets factors that determine
    :param participant: as the participant raw (including categorical values) to process.
    :param first: flag to indicate if first or second sample for this participant must be extracted.
    :return: dictionary with dependent variables (time, pass-rate) and dummy-converted
    categorical values (methodology, period, app)
    """
    period: int = 0 if first else 1
    return {'period': period}


def extract_multi_linear_samples(assessed_population: list[AssessedParticipant]) -> DataFrame:
    """
    Existing restify CSV has sampling points for repeated measures interleaved per table
    entry. This helper function splits the mangled data into one sampling point per table entry,
    and converts categorical variables to numeric (dummy) variables.
    :param assessed_population: as all participant data as extracted from the restify csv file.
    :return: Pandas dataframe with one experiment measure (sample) per row.
    """
    multi_linear_samples = []

    # # For every participant, extract both experiment samples (one per period)
    for participant in assessed_population:
        multi_linear_samples.append(categorical_to_numerical(participant, True))
        multi_linear_samples.append(categorical_to_numerical(participant, False))

    # convert to pandas dataframe and return
    multi_linear_samples_dataframe: DataFrame = pd.DataFrame.from_records(multi_linear_samples)
    return multi_linear_samples_dataframe
